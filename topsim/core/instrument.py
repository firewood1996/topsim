# Copyright (C) 28/1/21 RW Bunney

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

from abc import ABC, abstractmethod
from enum import Enum


class Instrument(ABC):

    def __init__(self):
        super().__init__()

    @abstractmethod
    def run(self):
        pass

    # @abstractmethod
    # def is_finished(self):
    #     pass

    @abstractmethod
    def to_df(self):
        pass


class Observation(object):
    """
    Observation object stores information about a given observation;
    the object also stores information about the workflow, and the generated
    plan for that workflow.

    Array with associated photographic information.

    Attributes
    ----------
    name : str
        Observation name
    start : int
        Expected start-time of the observation
    duration : int
        Expected Duration of the observation
    demand : int
        Expected Telescope demand of (Number of arrays used) during observation
    workflow : str
        Path to the workflow specification (JSON file)
    type : str
        What type of observation (Continuum, Spectral, etc.)
    ingest_data_rate : int
        Expected incoming data rate produced by the observation (GB/s)
    total_data_size : int
        Total size of the data produced by the observation. This is updated
        every simulation time step based on the duration of the observation
        and ingest_data_rate
    plan : WorkflowPlan object
        Workflow pre-schedule generated by the Planner once observation has
        been started on Telescope.
    """

    def __init__(self, name, start, duration, demand, workflow, type,
                 data_rate):
        """
        Parameters
           ----------
        name : str
            Observation name/ID
        start : int
            Expected start-time of the observation
        duration : int
            Expected Duration of the observation
        demand : int
            Expected Telescope demand of (Number of arrays used) during observation
        workflow : str
            Path to the workflow specification (JSON file)
        type : str
            What type of observation (Continuum, Spectral, etc.)
        data_rate: int
            Expected incoming data rate produced by the observation (GB/s)

        """

        self.name = name
        self.buffer_id = 0
        self.cluster_id = 'default'
        # self.start = start
        self.est = start
        self.ast = None
        self.duration = duration
        self.demand = demand
        self.status = RunStatus.WAITING
        self.type = type
        self.workflow = workflow
        self.total_data_size = 0
        self.ingest_data_rate = data_rate
        self.plan = None

    def is_ready(self, current_time, capacity):
        """

        Parameters
        ----------
        current_time: int
            The current simulation time (Simpy.env.now)
        capacity : int
            Current capacity of the telescope at this time

        Returns
        -------
        True if telescope has capacity, and the observation is scheduled to
        start from now

        False if telescope does not have capacity

        """
        if self.est <= current_time \
                and self.demand <= capacity \
                and self.status is RunStatus.WAITING:
            return True
        else:
            return False

    def is_finished(self, current_time, telescope_status):
        if self.ast is None:
            return False
        elif current_time >= self.ast + self.duration \
                and telescope_status \
                and (self.status is not RunStatus.FINISHED):
            return True
        else:
            return False


class RunStatus(str, Enum):
    WAITING = 'WAITING'
    RUNNING = 'RUNNING'
    FINISHED = 'FINISHED'
